// Copyright 2024 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51
//
// Register Package auto-generated by `reggen` containing data structure

package control_registers_reg_pkg;

  // Param list
  parameter int ROCacheNumAddrRules = 4;
  parameter int MAX_NumGroups = 8;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } control_registers_reg2hw_eoc_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } control_registers_reg2hw_wake_up_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } control_registers_reg2hw_wake_up_tile_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } control_registers_reg2hw_wake_up_group_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } control_registers_reg2hw_ro_cache_enable_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } control_registers_reg2hw_ro_cache_flush_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } control_registers_reg2hw_ro_cache_start_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } control_registers_reg2hw_ro_cache_end_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } control_registers_hw2reg_tcdm_start_address_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } control_registers_hw2reg_tcdm_end_address_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } control_registers_hw2reg_nr_cores_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } control_registers_hw2reg_ro_cache_start_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } control_registers_hw2reg_ro_cache_end_mreg_t;

  // Register -> HW type
  typedef struct packed {
    control_registers_reg2hw_eoc_reg_t eoc; // [689:658]
    control_registers_reg2hw_wake_up_reg_t wake_up; // [657:625]
    control_registers_reg2hw_wake_up_tile_mreg_t [7:0] wake_up_tile; // [624:361]
    control_registers_reg2hw_wake_up_group_reg_t wake_up_group; // [360:328]
    control_registers_reg2hw_ro_cache_enable_reg_t ro_cache_enable; // [327:296]
    control_registers_reg2hw_ro_cache_flush_reg_t ro_cache_flush; // [295:264]
    control_registers_reg2hw_ro_cache_start_mreg_t [3:0] ro_cache_start; // [263:132]
    control_registers_reg2hw_ro_cache_end_mreg_t [3:0] ro_cache_end; // [131:0]
  } control_registers_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    control_registers_hw2reg_tcdm_start_address_reg_t tcdm_start_address; // [351:320]
    control_registers_hw2reg_tcdm_end_address_reg_t tcdm_end_address; // [319:288]
    control_registers_hw2reg_nr_cores_reg_reg_t nr_cores_reg; // [287:256]
    control_registers_hw2reg_ro_cache_start_mreg_t [3:0] ro_cache_start; // [255:128]
    control_registers_hw2reg_ro_cache_end_mreg_t [3:0] ro_cache_end; // [127:0]
  } control_registers_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_EOC_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_0_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_1_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_2_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_3_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_4_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_5_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_6_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_TILE_7_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_WAKE_UP_GROUP_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_TCDM_START_ADDRESS_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_TCDM_END_ADDRESS_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_NR_CORES_REG_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_ENABLE_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_FLUSH_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_START_0_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_START_1_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_START_2_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_START_3_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_END_0_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_END_1_OFFSET = 7'h 54;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_END_2_OFFSET = 7'h 58;
  parameter logic [BlockAw-1:0] CONTROL_REGISTERS_RO_CACHE_END_3_OFFSET = 7'h 5c;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] CONTROL_REGISTERS_TCDM_START_ADDRESS_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_TCDM_END_ADDRESS_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_NR_CORES_REG_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_START_0_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_START_1_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_START_2_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_START_3_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_END_0_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_END_1_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_END_2_RESVAL = 32'h 0;
  parameter logic [31:0] CONTROL_REGISTERS_RO_CACHE_END_3_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    CONTROL_REGISTERS_EOC,
    CONTROL_REGISTERS_WAKE_UP,
    CONTROL_REGISTERS_WAKE_UP_TILE_0,
    CONTROL_REGISTERS_WAKE_UP_TILE_1,
    CONTROL_REGISTERS_WAKE_UP_TILE_2,
    CONTROL_REGISTERS_WAKE_UP_TILE_3,
    CONTROL_REGISTERS_WAKE_UP_TILE_4,
    CONTROL_REGISTERS_WAKE_UP_TILE_5,
    CONTROL_REGISTERS_WAKE_UP_TILE_6,
    CONTROL_REGISTERS_WAKE_UP_TILE_7,
    CONTROL_REGISTERS_WAKE_UP_GROUP,
    CONTROL_REGISTERS_TCDM_START_ADDRESS,
    CONTROL_REGISTERS_TCDM_END_ADDRESS,
    CONTROL_REGISTERS_NR_CORES_REG,
    CONTROL_REGISTERS_RO_CACHE_ENABLE,
    CONTROL_REGISTERS_RO_CACHE_FLUSH,
    CONTROL_REGISTERS_RO_CACHE_START_0,
    CONTROL_REGISTERS_RO_CACHE_START_1,
    CONTROL_REGISTERS_RO_CACHE_START_2,
    CONTROL_REGISTERS_RO_CACHE_START_3,
    CONTROL_REGISTERS_RO_CACHE_END_0,
    CONTROL_REGISTERS_RO_CACHE_END_1,
    CONTROL_REGISTERS_RO_CACHE_END_2,
    CONTROL_REGISTERS_RO_CACHE_END_3
  } control_registers_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CONTROL_REGISTERS_PERMIT [24] = '{
    4'b 1111, // index[ 0] CONTROL_REGISTERS_EOC
    4'b 1111, // index[ 1] CONTROL_REGISTERS_WAKE_UP
    4'b 1111, // index[ 2] CONTROL_REGISTERS_WAKE_UP_TILE_0
    4'b 1111, // index[ 3] CONTROL_REGISTERS_WAKE_UP_TILE_1
    4'b 1111, // index[ 4] CONTROL_REGISTERS_WAKE_UP_TILE_2
    4'b 1111, // index[ 5] CONTROL_REGISTERS_WAKE_UP_TILE_3
    4'b 1111, // index[ 6] CONTROL_REGISTERS_WAKE_UP_TILE_4
    4'b 1111, // index[ 7] CONTROL_REGISTERS_WAKE_UP_TILE_5
    4'b 1111, // index[ 8] CONTROL_REGISTERS_WAKE_UP_TILE_6
    4'b 1111, // index[ 9] CONTROL_REGISTERS_WAKE_UP_TILE_7
    4'b 1111, // index[10] CONTROL_REGISTERS_WAKE_UP_GROUP
    4'b 1111, // index[11] CONTROL_REGISTERS_TCDM_START_ADDRESS
    4'b 1111, // index[12] CONTROL_REGISTERS_TCDM_END_ADDRESS
    4'b 1111, // index[13] CONTROL_REGISTERS_NR_CORES_REG
    4'b 1111, // index[14] CONTROL_REGISTERS_RO_CACHE_ENABLE
    4'b 1111, // index[15] CONTROL_REGISTERS_RO_CACHE_FLUSH
    4'b 1111, // index[16] CONTROL_REGISTERS_RO_CACHE_START_0
    4'b 1111, // index[17] CONTROL_REGISTERS_RO_CACHE_START_1
    4'b 1111, // index[18] CONTROL_REGISTERS_RO_CACHE_START_2
    4'b 1111, // index[19] CONTROL_REGISTERS_RO_CACHE_START_3
    4'b 1111, // index[20] CONTROL_REGISTERS_RO_CACHE_END_0
    4'b 1111, // index[21] CONTROL_REGISTERS_RO_CACHE_END_1
    4'b 1111, // index[22] CONTROL_REGISTERS_RO_CACHE_END_2
    4'b 1111  // index[23] CONTROL_REGISTERS_RO_CACHE_END_3
  };

endpackage
