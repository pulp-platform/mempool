diff --git a/hardware/deps/tech_cells_generic/src/deprecated/pulp_clk_cells.sv b/hardware/deps/tech_cells_generic/src/deprecated/pulp_clk_cells.sv
index 53ad07f..4f47d47 100644
--- a/hardware/deps/tech_cells_generic/src/deprecated/pulp_clk_cells.sv
+++ b/hardware/deps/tech_cells_generic/src/deprecated/pulp_clk_cells.sv
@@ -98,9 +98,9 @@ module pulp_clock_delay(
   input  logic in_i,
   output logic out_o
 );
-
+  /* verilator lint_off ASSIGNDLY */
   assign #(300ps) out_o = in_i;
-
+  /* verilator lint_on ASSIGNDLY */
 endmodule
 `endif
 
diff --git a/hardware/deps/tech_cells_generic/src/deprecated/pulp_clock_gating_async.sv b/hardware/deps/tech_cells_generic/src/deprecated/pulp_clock_gating_async.sv
index 5c95b55..88e9707 100644
--- a/hardware/deps/tech_cells_generic/src/deprecated/pulp_clock_gating_async.sv
+++ b/hardware/deps/tech_cells_generic/src/deprecated/pulp_clock_gating_async.sv
@@ -41,4 +41,4 @@ module pulp_clock_gating_async #(
     .clk_o
   );
 
-endmodule
\ No newline at end of file
+endmodule
diff --git a/hardware/deps/tech_cells_generic/src/rtl/tc_clk.sv b/hardware/deps/tech_cells_generic/src/rtl/tc_clk.sv
index 3ab329e..491c719 100644
--- a/hardware/deps/tech_cells_generic/src/rtl/tc_clk.sv
+++ b/hardware/deps/tech_cells_generic/src/rtl/tc_clk.sv
@@ -43,10 +43,11 @@ module tc_clk_gating #(
 );
 
   logic clk_en;
-
+  /* verilator lint_off COMBDLY */
   always_latch begin
     if (clk_i == 1'b0) clk_en <= en_i | test_en_i;
   end
+  /* verilator lint_on COMBDLY */
 
   assign clk_o = clk_i & clk_en;
 
diff --git a/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv b/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
index b702a11..a3cb149 100644
--- a/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
+++ b/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
@@ -242,4 +242,69 @@ module tc_sram #(
 `endif
 `endif
 // pragma translate_on
+
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+/**
+ * Memory loader for simulation
+ *
+ * Include this file in a memory primitive to load a memory array from
+ * simulation.
+ *
+ * Requirements:
+ * - A memory array named `sram`.
+ * - A parameter `DataWidth` giving the memory width (word size) in bit.
+ * - A parameter `NumWords` giving the memory depth in words.
+ */
+
+`ifndef SYNTHESIS
+  // Task for loading 'sram' with SystemVerilog system task $readmemh()
+  export "DPI-C" task simutil_memload;
+
+  task simutil_memload;
+    input string file;
+    $readmemh(file, sram);
+  endtask
+
+  // Function for setting a specific element in |sram|
+  // Returns 1 (true) for success, 0 (false) for errors.
+  export "DPI-C" function simutil_set_mem;
+
+  function int simutil_set_mem(input int index, input bit [1023:0] val);
+
+    // Function will only work for memories <= 1024 bits
+    if (DataWidth > 1024) begin
+      return 0;
+    end
+
+    if (index >= NumWords) begin
+      return 0;
+    end
+
+    sram[index] = val[DataWidth-1:0];
+    return 1;
+  endfunction
+
+  // Function for getting a specific element in |sram|
+  export "DPI-C" function simutil_get_mem;
+
+  function int simutil_get_mem(input int index, output bit [1023:0] val);
+
+    // Function will only work for memories <= 1024 bits
+    if (DataWidth > 1024) begin
+      return 0;
+    end
+
+    if (index >= NumWords) begin
+      return 0;
+    end
+
+    val = 0;
+    val[DataWidth-1:0] = sram[index];
+    return 1;
+  endfunction
+`endif
+
 endmodule
