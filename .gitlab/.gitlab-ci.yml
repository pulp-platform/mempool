# Copyright 2021 ETH Zurich and University of Bologna.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

# Author: Samuel Riedel, ETH Zurich

variables:
  GIT_SUBMODULE_STRATEGY: none
  ROOT_DIR: '$CI_PROJECT_DIR'
  APPS: "apps/baremetal/tests"
  RUST_LOG: 'memora=debug'
  VERILATOR_ROOT: '$CI_PROJECT_DIR/install/verilator'
  CLANG_PATH: '/usr/pack/llvm-10.0.1-af'
  PATH: '/home/gitlabci/miniconda3/condabin:/home/gitlabci/.cargo/bin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/usr/local/condor/bin:/usr/sepp/bin:$VERILATOR_ROOT/bin'
  OBJCACHE: ''
  RISCV_WARNINGS: '-Werror'
  CC: 'gcc-11.2.0'
  CXX: 'g++-11.2.0'
  CMAKE: 'cmake-3.28.3'

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_NAME

before_script:
  - env
  - source /home/gitlabci/miniconda3/etc/profile.d/conda.sh
  - conda activate mempool

stages:
  - tools
  - build
  - test

tc-gcc:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup tc-riscv-gcc; then
        git submodule update --init --recursive -- toolchain/riscv-gnu-toolchain
        make tc-riscv-gcc
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert tc-riscv-gcc
      fi

tc-llvm:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup tc-llvm; then
        git submodule update --init --recursive -- toolchain/llvm-project
        make tc-llvm
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert tc-llvm
      fi

riscv-isa-sim:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup riscv-isa-sim; then
        git submodule update --init --recursive -- toolchain/riscv-isa-sim
        make riscv-isa-sim
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert riscv-isa-sim
      fi

verilator:
  stage: tools
  script:
    # The CI's ccache directory is very limited in size, so let's disable it.
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup verilator; then
        git submodule update --init --recursive -- toolchain/verilator
        export VERILATOR_CI="--disable-defenv"
        make verilator
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert verilator
      fi

halide:
  stage: build
  script:
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup halide; then
        # Download LLVM
        $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-llvm
        # Build Halide
        git submodule update --init --recursive -- toolchain/halide
        make halide
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert halide
      fi
  needs: ["tc-llvm"]

verilator-model:
  stage: build
  script:
    - |
      if ! $CI_PROJECT_DIR/scripts/memora_retry.sh lookup verilator-model; then
        # Download Verilator and add missing links
        $CI_PROJECT_DIR/scripts/memora_retry.sh get verilator
        ln -s $VERILATOR_ROOT/share/verilator/include $VERILATOR_ROOT/include
        ln -s $VERILATOR_ROOT/share/verilator/bin/verilator_includer $VERILATOR_ROOT/bin/verilator_includer
        # Build the verilator model
        git submodule update --init --recursive -- hardware/deps/*
        make update-deps
        make -C hardware $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator
        $CI_PROJECT_DIR/scripts/memora_retry.sh insert verilator-model
      fi
  variables:
    config: "minpool"
  needs: ["verilator"]

hardware:
  stage: test
  script:
    - git submodule update --init --recursive -- hardware/deps/*
    - make update-deps
    - make -C hardware compile
  needs: []

check-bootrom:
  stage: test
  needs: ["tc-gcc"]
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - rm software/runtime/bootrom.img
    - rm hardware/src/bootrom.sv
    - make -C software runtime/bootrom.img
    - make -C hardware src/bootrom.sv
    - git diff --exit-code

check-opcodes:
  stage: test
  script:
    - make update_opcodes
    - git diff --exit-code

# Software tests
.apps: &apps-job-anchor
  stage: test
  artifacts:
    paths:
      - hardware/build/transcript
      - software/bin/*
    expire_in: 1 week

.apps-script:
  script: &apps-script-anchor
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get riscv-isa-sim
    - cd software/apps/baremetal
    - make COMPILER=${COMPILER} all
    - cd ../..
    - git submodule update --init --recursive -- hardware/deps/*
    - make update-deps
    - cd hardware
    - |
      for APP in ${APPS}; do
        app=${APP} make simc
      done

apps-llvm:
  <<: *apps-job-anchor
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-llvm
    - *apps-script-anchor
  variables:
    COMPILER: "llvm"
  needs: ["tc-gcc","riscv-isa-sim","tc-llvm"]

apps-gcc:
  <<: *apps-job-anchor
  script:
    - *apps-script-anchor
  variables:
    COMPILER: "gcc"
  needs: ["tc-gcc","riscv-isa-sim"]

apps-halide:
  <<: *apps-job-anchor
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get riscv-isa-sim
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get halide
    - cd software/apps/halide
    - make COMPILER=${COMPILER} all
    - cd ../..
    - git submodule update --init --recursive -- hardware/deps/*
    - make update-deps
    - cd hardware
    - app=apps/halide/2d_convolution make simc
  variables:
    COMPILER: "llvm"
    APP: "halide-2d_convolution"
  needs: ["tc-gcc","riscv-isa-sim","tc-llvm","halide"]

apps-omp:
  <<: *apps-job-anchor
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - cd software/apps/omp
    - make COMPILER=${COMPILER} all
  variables:
    COMPILER: "gcc"
  needs: ["tc-gcc"]

# Unit tests
unit-tests:
  stage: test
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get riscv-isa-sim
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get verilator-model
    - make update_opcodes
    - touch $ROOT_DIR/software/runtime/encoding.h
    - touch $ROOT_DIR/hardware/src/bootrom.sv
    - touch $ROOT_DIR/hardware/deps/snitch/src/riscv_instr.sv
    - touch $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator.mk
    - touch $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator
    - make riscv-tests
  variables:
    COMPILER: "gcc"
  needs: ["tc-gcc","riscv-isa-sim","verilator-model"]
  artifacts:
    paths:
      - software/riscv-tests/isa/*.dump
      - software/riscv-tests/isa/*.out32
      - software/bin/*.dump
      - hardware/build/transcript
      - hardware/results
    expire_in: 1 week

# Verilator test
verilator-tests:
  stage: test
  script:
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get verilator-model
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get riscv-isa-sim
    - cd software/apps
    - |
      for APP in ${APPS}; do
        make COMPILER=${COMPILER} ${APP}
      done
    - cd ../../hardware
    - |
      for APP in ${APPS}; do
        app=${APP} make -o $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator verilate
      done
  variables:
    config: "minpool"
  needs: ["tc-gcc","riscv-isa-sim","tc-llvm","verilator-model"]

# Code style test
code-style:
  stage: test
  script:
    # Download LLVM
    - $CI_PROJECT_DIR/scripts/memora_retry.sh get tc-llvm
    - ./scripts/lint.sh
  needs: ["tc-llvm"]
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      allow_failure: false
    - if: '$CI_MERGE_REQUEST_ID == null'
      allow_failure: true
